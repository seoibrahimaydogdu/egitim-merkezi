# backend/app/trend_service.py
import requests
import os
from dotenv import load_dotenv
from datetime import datetime, timedelta, timezone
from .supabase_client import supabase
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import uuid

load_dotenv()

# Sahte verilerimizi burada tutalÄ±m
DUMMY_TRENDS_DATA = [
    {
        "keyword": "SGE",
        "alert": "YÃœKSELÄ°ÅžTE",
        "message": "Google'Ä±n SGE Ã¶zelliÄŸi hÄ±zla popÃ¼lerlik kazanÄ±yor. Ä°Ã§erik stratejinizi buna gÃ¶re optimize etmelisiniz.",
        "link": "https://www.searchenginejournal.com/google-sge-guide/501234/",
        "icon": "ðŸ“ˆ"
    },
    {
        "keyword": "helpful content update",
        "alert": "DÃœÅžÃœÅžTE",
        "message": "Helpful Content Update konusundaki ilgi azalÄ±yor. Ancak hala Ã¶nemli bir sÄ±ralama faktÃ¶rÃ¼.",
        "link": "https://www.searchenginejournal.com/google-helpful-content-system/461234/",
        "icon": "ðŸ“‰"
    },
    {
        "keyword": "core web vitals",
        "alert": "STABÄ°L",
        "message": "Core Web Vitals arama hacmi stabil. Site hÄ±zÄ±nÄ± ve kullanÄ±cÄ± deneyimini iyileÅŸtirmeye devam edin.",
        "link": "https://web.dev/vitals/",
        "icon": "ðŸ“Š"
    }
]

app = FastAPI()

class SharePayload(BaseModel):
    user_id: str
    title: str

# âœ… YENÄ°: Konu ve Kanal Abonelikleri iÃ§in Pydantic Modelleri
class TopicSubscriptionPayload(BaseModel):
    user_id: str
    channel_id: str
    keyword: str

class ChannelSubscriptionPayload(BaseModel):
    user_id: str
    channel_id: str

@app.post("/share/favorites")
def share_favorites(payload: SharePayload):
    """
    KullanÄ±cÄ±nÄ±n favori listesini paylaÅŸmak iÃ§in benzersiz bir link oluÅŸturur.
    """
    supabase_client = supabase
    
    # KullanÄ±cÄ±nÄ±n favorilerini Ã§ek
    favorites_response = supabase_client.table('favorites').select('video_id').eq('user_id', payload.user_id).execute()
    favorites = [fav['video_id'] for fav in favorites_response.data]

    if not favorites:
        raise HTTPException(status_code=404, detail="PaylaÅŸÄ±lacak favori bulunamadÄ±.")

    # PaylaÅŸÄ±m listesi iÃ§in benzersiz bir ID oluÅŸtur
    share_id = str(uuid.uuid4())

    # PaylaÅŸÄ±m listesini veritabanÄ±na kaydet
    share_response = supabase_client.table('shared_favorites').insert({
        'share_id': share_id,
        'user_id': payload.user_id,
        'title': payload.title,
        'favorites': favorites
    }).execute()

    if share_response.data:
        # OluÅŸturulan paylaÅŸÄ±m linkini dÃ¶ndÃ¼r
        return {"share_link": f"http://localhost:3000/shared-list/{share_id}"}
    
    raise HTTPException(status_code=500, detail="PaylaÅŸÄ±m linki oluÅŸturulurken bir hata oluÅŸtu.")
    
@app.get("/shared-list/{share_id}")
def get_shared_favorites(share_id: str):
    """
    Verilen ID ile paylaÅŸÄ±lan favori listesini dÃ¶ndÃ¼rÃ¼r.
    """
    supabase_client = supabase
    shared_list_response = supabase_client.table('shared_favorites').select('favorites, title').eq('share_id', share_id).single().execute()
    
    if not shared_list_response.data:
        raise HTTPException(status_code=404, detail="PaylaÅŸÄ±lan liste bulunamadÄ±.")
    
    # Favori listesinin iÃ§eriÄŸini detaylandÄ±rmak iÃ§in video bilgilerini Ã§ekelim
    video_ids = shared_list_response.data['favorites']
    videos_response = supabase_client.table('videos').select('*').in_('video_id', video_ids).execute()
    
    return {
        "title": shared_list_response.data['title'],
        "videos": videos_response.data
    }

# âœ… YENÄ°: Konu aboneliÄŸi ekleme ve silme endpoint'leri
@app.post("/subscribe/topic")
def subscribe_to_topic(payload: TopicSubscriptionPayload):
    """
    KullanÄ±cÄ±yÄ± belirli bir kanal ve anahtar kelime iÃ§in abone yapar.
    """
    supabase_client = supabase
    try:
        response = supabase_client.table('topic_subscriptions').insert({
            'user_id': payload.user_id,
            'channel_id': payload.channel_id,
            'keyword': payload.keyword
        }).execute()
        return {"success": True, "data": response.data}
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

@app.delete("/subscribe/topic")
def unsubscribe_from_topic(user_id: str, channel_id: str, keyword: str):
    """
    KullanÄ±cÄ±nÄ±n belirli bir konu aboneliÄŸini siler.
    """
    supabase_client = supabase
    try:
        response = supabase_client.table('topic_subscriptions').delete().eq('user_id', user_id).eq('channel_id', channel_id).eq('keyword', keyword).execute()
        return {"success": True, "data": response.data}
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

# âœ… YENÄ°: Kanal aboneliÄŸi ekleme ve silme endpoint'leri
@app.post("/subscribe/channel")
def subscribe_to_channel(payload: ChannelSubscriptionPayload):
    """
    KullanÄ±cÄ±yÄ± bir kanala abone yapar.
    """
    supabase_client = supabase
    try:
        response = supabase_client.table('channel_subscriptions').insert({
            'user_id': payload.user_id,
            'channel_id': payload.channel_id
        }).execute()
        return {"success": True, "data": response.data}
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

@app.delete("/subscribe/channel")
def unsubscribe_from_channel(user_id: str, channel_id: str):
    """
    KullanÄ±cÄ±nÄ±n kanal aboneliÄŸini siler.
    """
    supabase_client = supabase
    try:
        response = supabase_client.table('channel_subscriptions').delete().eq('user_id', user_id).eq('channel_id', channel_id).execute()
        return {"success": True, "data": response.data}
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

# Mevcut kodlar...
def get_seo_trends():
    """
    Supabase'den SEO trendlerini Ã§eker. EÄŸer veri yoksa veya eskiyse (24 saatten fazla),
    gÃ¼ncelleyip geri dÃ¶ner.
    """
    try:
        response = supabase.table("seo_trends").select("*").execute()
        trends = response.data
    except Exception as e:
        print(f"Supabase'den trend verisi Ã§ekilirken hata oluÅŸtu: {e}")
        return []

    if not trends or is_data_outdated(trends):
        print("Trend verisi yok veya gÃ¼ncel deÄŸil. GÃ¼ncelleniyor...")
        try:
            supabase.table("seo_trends").upsert(DUMMY_TRENDS_DATA, on_conflict="keyword").execute()
            response = supabase.table("seo_trends").select("*").execute()
            trends = response.data
        except Exception as e:
            print(f"Supabase'e trend verisi yazÄ±lÄ±rken hata oluÅŸtu: {e}")
            return []

    return trends

def is_data_outdated(trends):
    """
    Verinin 24 saatten eski olup olmadÄ±ÄŸÄ±nÄ± kontrol eder.
    """
    if not trends:
        return True
    
    last_updated_str = trends[0].get("updated_at")
    if not last_updated_str:
        return True
    
    try:
        last_updated = datetime.fromisoformat(last_updated_str).astimezone(timezone.utc)
        now = datetime.now(timezone.utc)
        return (now - last_updated) > timedelta(hours=24)
    except (ValueError, TypeError) as e:
        print(f"Tarih formatÄ±nda hata: {e}")
        return True